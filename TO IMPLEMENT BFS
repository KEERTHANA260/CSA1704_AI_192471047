from collections import deque
def bfs(graph, start):
    visited = set()          
    queue = deque([start])   
    result = []              

    while queue:
        node = queue.popleft()   

        if node not in visited:
            visited.add(node)    
            result.append(node) 
            for neighbor in graph[node]:
                if neighbor not in visited:
                    queue.append(neighbor)
    return result


if __name__ == "__main__":
    graph = {
        'A': ['B', 'C'],
        'B': ['A', 'D', 'E'],
        'C': ['A', 'F'],
        'D': ['B'],
        'E': ['B', 'F'],
        'F': ['C', 'E']
    }

    start_node = 'A'
    print("BFS Traversal:", bfs(graph, start_node))

O/P
BFS Traversal: ['A', 'B', 'C', 'D', 'E', 'F']
