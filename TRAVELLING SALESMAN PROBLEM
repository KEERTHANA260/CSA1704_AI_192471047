import itertools
def travelling_salesman(graph, start):
    vertices = list(range(len(graph)))
    vertices.remove(start)
    min_path = float('inf')
    best_path = []

    for perm in itertools.permutations(vertices):
        current_cost = 0
        k = start

        for j in perm:
            current_cost += graph[k][j]
            k = j

        current_cost += graph[k][start]

        if current_cost < min_path:
            min_path = current_cost
            best_path = [start] + list(perm) + [start]

    return min_path, best_path

if __name__ == "__main__":
    graph = [
        [0, 10, 15, 20],
        [10, 0, 35, 25],
        [15, 35, 0, 30],
        [20, 25, 30, 0]
    ]

    start = 0  

    min_cost, path = travelling_salesman(graph, start)

    print("Optimal Path:", " -> ".join(map(str, path)))
    print("Minimum Cost:", min_cost)
